{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\Swanandi Projects\\\\market_intelligence_platform.1\\\\client\\\\src\\\\pages\\\\MarketForecasting.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Card, Select, Button, Input, Label } from '../components/Common';\nimport { LineChart } from '../components/Dashboard';\nimport ForecastMethodInfo from '../components/ForecastMethodInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PageContainer = styled.div`\n  padding: 20px;\n`;\n_c = PageContainer;\nconst ForecastForm = styled(Card)`\n  padding: 20px;\n  margin-bottom: 20px;\n`;\n_c2 = ForecastForm;\nconst ChartContainer = styled.div`\n  height: 400px;\n  margin-top: 20px;\n`;\n_c3 = ChartContainer;\nconst ResultsContainer = styled(Card)`\n  padding: 20px;\n  margin-top: 20px;\n`;\n_c4 = ResultsContainer;\nconst MethodComparison = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n`;\n_c5 = MethodComparison;\nconst ForecastGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n`;\n_c6 = ForecastGrid;\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-top: 25px;\n`;\n_c7 = ButtonGroup;\nconst ForecastValue = styled.div`\n  padding: 10px;\n  background-color: rgba(74, 111, 165, 0.1);\n  border-radius: 4px;\n  text-align: center;\n  font-weight: 500;\n\n  & > div:first-child {\n    font-weight: bold;\n    margin-bottom: 5px;\n  }\n`;\n_c8 = ForecastValue;\nconst formatMethodName = method => method.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\nfunction MarketForecasting() {\n  _s();\n  const [forecastMethod, setForecastMethod] = useState('moving_average');\n  const [historicalData, setHistoricalData] = useState([]);\n  const [forecastData, setForecastData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [windowSize, setWindowSize] = useState(3);\n  const [steps, setSteps] = useState(7);\n  const [showComparison, setShowComparison] = useState(false);\n  const [comparisonResults, setComparisonResults] = useState(null);\n  useEffect(() => {\n    // Mock historical data\n    const mockData = Array.from({\n      length: 30\n    }, (_, i) => 100 + Math.sin(i / 2) * 20 + Math.random() * 10);\n    setHistoricalData(mockData);\n  }, []);\n  const runForecast = async () => {\n    if (windowSize < 2 || windowSize > 10 || steps < 1 || steps > 30) return;\n    setLoading(true);\n    try {\n      // Mock forecast call\n      setTimeout(() => {\n        const mockForecast = Array.from({\n          length: steps\n        }, () => {\n          const lastValue = historicalData[historicalData.length - 1];\n          const trend = forecastMethod === 'linear_regression' ? lastValue * 0.98 : lastValue * 0.995;\n          return trend + Math.random() * 5;\n        });\n        setForecastData(mockForecast);\n        setLoading(false);\n        setShowComparison(false);\n      }, 1000);\n    } catch (error) {\n      console.error('Forecast error:', error);\n      setLoading(false);\n    }\n  };\n  const compareMethods = async () => {\n    if (windowSize < 2 || windowSize > 10 || steps < 1 || steps > 30) return;\n    setLoading(true);\n    try {\n      setTimeout(() => {\n        const methods = ['moving_average', 'linear_regression', 'exponential_smoothing'];\n        const results = methods.map(method => {\n          const forecast = Array.from({\n            length: steps\n          }, () => {\n            const lastValue = historicalData[historicalData.length - 1];\n            let trend;\n            if (method === 'moving_average') trend = lastValue * 0.995;else if (method === 'linear_regression') trend = lastValue * 0.98;else trend = lastValue * 1.01;\n            return trend + Math.random() * 5;\n          });\n          return {\n            method,\n            forecast,\n            accuracy: 80 + Math.random() * 15 // Mock accuracy\n          };\n        });\n        setComparisonResults(results);\n        setShowComparison(true);\n        setLoading(false);\n      }, 1500);\n    } catch (error) {\n      console.error('Comparison error:', error);\n      setLoading(false);\n    }\n  };\n  const chartData = {\n    labels: [...historicalData.map((_, i) => `Day ${i + 1}`), ...forecastData.map((_, i) => `F ${i + 1}`)],\n    datasets: [{\n      label: 'Historical Data',\n      data: [...historicalData, ...Array(forecastData.length).fill(null)],\n      borderColor: '#4a6fa5',\n      backgroundColor: 'rgba(74, 111, 165, 0.1)',\n      tension: 0.1\n    }, {\n      label: 'Forecast',\n      data: [...Array(historicalData.length).fill(null), ...forecastData],\n      borderColor: '#ff6b6b',\n      backgroundColor: 'rgba(255, 107, 107, 0.1)',\n      borderDash: [5, 5],\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(PageContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Market Forecasting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ForecastForm, {\n      children: [/*#__PURE__*/_jsxDEV(ForecastGrid, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            children: [\"Forecasting Method\", /*#__PURE__*/_jsxDEV(Select, {\n              value: forecastMethod,\n              onChange: e => setForecastMethod(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"moving_average\",\n                children: \"Moving Average\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"linear_regression\",\n                children: \"Linear Regression\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"exponential_smoothing\",\n                children: \"Exponential Smoothing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"seasonal_naive\",\n                children: \"Seasonal Naive\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), forecastMethod === 'moving_average' && /*#__PURE__*/_jsxDEV(Label, {\n            children: [\"Window Size\", /*#__PURE__*/_jsxDEV(Input, {\n              type: \"number\",\n              value: windowSize,\n              onChange: e => {\n                const val = parseInt(e.target.value, 10);\n                if (!isNaN(val)) setWindowSize(val);\n              },\n              min: \"2\",\n              max: \"10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            children: [\"Forecast Period (days)\", /*#__PURE__*/_jsxDEV(Input, {\n              type: \"number\",\n              value: steps,\n              onChange: e => {\n                const val = parseInt(e.target.value, 10);\n                if (!isNaN(val)) setSteps(val);\n              },\n              min: \"1\",\n              max: \"30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              primary: true,\n              onClick: runForecast,\n              disabled: loading || historicalData.length === 0 || windowSize < 2 || windowSize > 10 || steps < 1 || steps > 30,\n              children: loading ? 'Forecasting...' : 'Run Forecast'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: compareMethods,\n              disabled: loading || historicalData.length === 0 || windowSize < 2 || windowSize > 10 || steps < 1 || steps > 30,\n              children: \"Compare Methods\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForecastMethodInfo, {\n        method: forecastMethod\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), forecastData.length > 0 && /*#__PURE__*/_jsxDEV(ResultsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Forecast Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Forecasted Values\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'grid',\n            gridTemplateColumns: 'repeat(auto-fill, minmax(120px, 1fr))',\n            gap: '10px'\n          },\n          children: forecastData.map((value, i) => /*#__PURE__*/_jsxDEV(ForecastValue, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Day \", i + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"$\", value.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this), showComparison && comparisonResults && /*#__PURE__*/_jsxDEV(ResultsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Method Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: {\n            labels: [...historicalData.map((_, i) => `D${i + 1}`), ...Array(steps).fill(0).map((_, i) => `F${i + 1}`)],\n            datasets: [{\n              label: 'Historical Data',\n              data: [...historicalData, ...Array(steps).fill(null)],\n              borderColor: '#4a6fa5',\n              backgroundColor: 'rgba(74, 111, 165, 0.1)',\n              tension: 0.1\n            }, ...comparisonResults.map((result, i) => ({\n              label: `${formatMethodName(result.method)} (${result.accuracy.toFixed(1)}%)`,\n              data: [...Array(historicalData.length).fill(null), ...result.forecast],\n              borderColor: ['#ff6b6b', '#88c999', '#f4a261'][i],\n              backgroundColor: 'transparent',\n              borderDash: [5, 5],\n              tension: 0.1\n            }))]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MethodComparison, {\n        children: comparisonResults.map((result, i) => /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: formatMethodName(result.method)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Accuracy: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [result.accuracy.toFixed(1), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Forecast Range:\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\" $\", Math.min(...result.forecast).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 19\n            }, this), \" to\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\" $\", Math.max(...result.forecast).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Average:\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\" $\", (result.forecast.reduce((a, b) => a + b, 0) / result.forecast.length).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 17\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(MarketForecasting, \"8Vk5m0THe+x4oZHH2LApJcs3LjM=\");\n_c9 = MarketForecasting;\nexport default MarketForecasting;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"PageContainer\");\n$RefreshReg$(_c2, \"ForecastForm\");\n$RefreshReg$(_c3, \"ChartContainer\");\n$RefreshReg$(_c4, \"ResultsContainer\");\n$RefreshReg$(_c5, \"MethodComparison\");\n$RefreshReg$(_c6, \"ForecastGrid\");\n$RefreshReg$(_c7, \"ButtonGroup\");\n$RefreshReg$(_c8, \"ForecastValue\");\n$RefreshReg$(_c9, \"MarketForecasting\");","map":{"version":3,"names":["React","useState","useEffect","styled","Card","Select","Button","Input","Label","LineChart","ForecastMethodInfo","jsxDEV","_jsxDEV","PageContainer","div","_c","ForecastForm","_c2","ChartContainer","_c3","ResultsContainer","_c4","MethodComparison","_c5","ForecastGrid","_c6","ButtonGroup","_c7","ForecastValue","_c8","formatMethodName","method","split","map","word","charAt","toUpperCase","slice","join","MarketForecasting","_s","forecastMethod","setForecastMethod","historicalData","setHistoricalData","forecastData","setForecastData","loading","setLoading","windowSize","setWindowSize","steps","setSteps","showComparison","setShowComparison","comparisonResults","setComparisonResults","mockData","Array","from","length","_","i","Math","sin","random","runForecast","setTimeout","mockForecast","lastValue","trend","error","console","compareMethods","methods","results","forecast","accuracy","chartData","labels","datasets","label","data","fill","borderColor","backgroundColor","tension","borderDash","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","val","parseInt","isNaN","min","max","primary","onClick","disabled","style","marginTop","display","gridTemplateColumns","gap","toFixed","result","reduce","a","b","_c9","$RefreshReg$"],"sources":["D:/Documents/Swanandi Projects/market_intelligence_platform.1/client/src/pages/MarketForecasting.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Card, Select, Button, Input, Label } from '../components/Common';\r\nimport { LineChart } from '../components/Dashboard';\r\nimport ForecastMethodInfo from '../components/ForecastMethodInfo';\r\n\r\nconst PageContainer = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst ForecastForm = styled(Card)`\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst ChartContainer = styled.div`\r\n  height: 400px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst ResultsContainer = styled(Card)`\r\n  padding: 20px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst MethodComparison = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 20px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst ForecastGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 20px;\r\n`;\r\n\r\nconst ButtonGroup = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 25px;\r\n`;\r\n\r\nconst ForecastValue = styled.div`\r\n  padding: 10px;\r\n  background-color: rgba(74, 111, 165, 0.1);\r\n  border-radius: 4px;\r\n  text-align: center;\r\n  font-weight: 500;\r\n\r\n  & > div:first-child {\r\n    font-weight: bold;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nconst formatMethodName = (method) =>\r\n  method\r\n    .split('_')\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ');\r\n\r\nfunction MarketForecasting() {\r\n  const [forecastMethod, setForecastMethod] = useState('moving_average');\r\n  const [historicalData, setHistoricalData] = useState([]);\r\n  const [forecastData, setForecastData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [windowSize, setWindowSize] = useState(3);\r\n  const [steps, setSteps] = useState(7);\r\n  const [showComparison, setShowComparison] = useState(false);\r\n  const [comparisonResults, setComparisonResults] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Mock historical data\r\n    const mockData = Array.from({ length: 30 }, (_, i) =>\r\n      100 + Math.sin(i / 2) * 20 + Math.random() * 10\r\n    );\r\n    setHistoricalData(mockData);\r\n  }, []);\r\n\r\n  const runForecast = async () => {\r\n    if (windowSize < 2 || windowSize > 10 || steps < 1 || steps > 30) return;\r\n    setLoading(true);\r\n    try {\r\n      // Mock forecast call\r\n      setTimeout(() => {\r\n        const mockForecast = Array.from({ length: steps }, () => {\r\n          const lastValue = historicalData[historicalData.length - 1];\r\n          const trend =\r\n            forecastMethod === 'linear_regression'\r\n              ? lastValue * 0.98\r\n              : lastValue * 0.995;\r\n          return trend + Math.random() * 5;\r\n        });\r\n        setForecastData(mockForecast);\r\n        setLoading(false);\r\n        setShowComparison(false);\r\n      }, 1000);\r\n    } catch (error) {\r\n      console.error('Forecast error:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const compareMethods = async () => {\r\n    if (windowSize < 2 || windowSize > 10 || steps < 1 || steps > 30) return;\r\n    setLoading(true);\r\n    try {\r\n      setTimeout(() => {\r\n        const methods = [\r\n          'moving_average',\r\n          'linear_regression',\r\n          'exponential_smoothing',\r\n        ];\r\n        const results = methods.map((method) => {\r\n          const forecast = Array.from({ length: steps }, () => {\r\n            const lastValue = historicalData[historicalData.length - 1];\r\n            let trend;\r\n            if (method === 'moving_average') trend = lastValue * 0.995;\r\n            else if (method === 'linear_regression') trend = lastValue * 0.98;\r\n            else trend = lastValue * 1.01;\r\n            return trend + Math.random() * 5;\r\n          });\r\n\r\n          return {\r\n            method,\r\n            forecast,\r\n            accuracy: 80 + Math.random() * 15, // Mock accuracy\r\n          };\r\n        });\r\n\r\n        setComparisonResults(results);\r\n        setShowComparison(true);\r\n        setLoading(false);\r\n      }, 1500);\r\n    } catch (error) {\r\n      console.error('Comparison error:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const chartData = {\r\n    labels: [\r\n      ...historicalData.map((_, i) => `Day ${i + 1}`),\r\n      ...forecastData.map((_, i) => `F ${i + 1}`),\r\n    ],\r\n    datasets: [\r\n      {\r\n        label: 'Historical Data',\r\n        data: [...historicalData, ...Array(forecastData.length).fill(null)],\r\n        borderColor: '#4a6fa5',\r\n        backgroundColor: 'rgba(74, 111, 165, 0.1)',\r\n        tension: 0.1,\r\n      },\r\n      {\r\n        label: 'Forecast',\r\n        data: [...Array(historicalData.length).fill(null), ...forecastData],\r\n        borderColor: '#ff6b6b',\r\n        backgroundColor: 'rgba(255, 107, 107, 0.1)',\r\n        borderDash: [5, 5],\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <PageContainer>\r\n      <h1>Market Forecasting</h1>\r\n\r\n      <ForecastForm>\r\n        <ForecastGrid>\r\n          <div>\r\n            <Label>\r\n              Forecasting Method\r\n              <Select\r\n                value={forecastMethod}\r\n                onChange={(e) => setForecastMethod(e.target.value)}\r\n              >\r\n                <option value=\"moving_average\">Moving Average</option>\r\n                <option value=\"linear_regression\">Linear Regression</option>\r\n                <option value=\"exponential_smoothing\">Exponential Smoothing</option>\r\n                <option value=\"seasonal_naive\">Seasonal Naive</option>\r\n              </Select>\r\n            </Label>\r\n\r\n            {forecastMethod === 'moving_average' && (\r\n              <Label>\r\n                Window Size\r\n                <Input\r\n                  type=\"number\"\r\n                  value={windowSize}\r\n                  onChange={(e) => {\r\n                    const val = parseInt(e.target.value, 10);\r\n                    if (!isNaN(val)) setWindowSize(val);\r\n                  }}\r\n                  min=\"2\"\r\n                  max=\"10\"\r\n                />\r\n              </Label>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label>\r\n              Forecast Period (days)\r\n              <Input\r\n                type=\"number\"\r\n                value={steps}\r\n                onChange={(e) => {\r\n                  const val = parseInt(e.target.value, 10);\r\n                  if (!isNaN(val)) setSteps(val);\r\n                }}\r\n                min=\"1\"\r\n                max=\"30\"\r\n              />\r\n            </Label>\r\n\r\n            <ButtonGroup>\r\n              <Button\r\n                primary\r\n                onClick={runForecast}\r\n                disabled={\r\n                  loading ||\r\n                  historicalData.length === 0 ||\r\n                  windowSize < 2 ||\r\n                  windowSize > 10 ||\r\n                  steps < 1 ||\r\n                  steps > 30\r\n                }\r\n              >\r\n                {loading ? 'Forecasting...' : 'Run Forecast'}\r\n              </Button>\r\n\r\n              <Button\r\n                onClick={compareMethods}\r\n                disabled={\r\n                  loading ||\r\n                  historicalData.length === 0 ||\r\n                  windowSize < 2 ||\r\n                  windowSize > 10 ||\r\n                  steps < 1 ||\r\n                  steps > 30\r\n                }\r\n              >\r\n                Compare Methods\r\n              </Button>\r\n            </ButtonGroup>\r\n          </div>\r\n        </ForecastGrid>\r\n\r\n        <ForecastMethodInfo method={forecastMethod} />\r\n      </ForecastForm>\r\n\r\n      {forecastData.length > 0 && (\r\n        <ResultsContainer>\r\n          <h2>Forecast Results</h2>\r\n          <ChartContainer>\r\n            <LineChart data={chartData} />\r\n          </ChartContainer>\r\n\r\n          <div style={{ marginTop: '20px' }}>\r\n            <h3>Forecasted Values</h3>\r\n            <div\r\n              style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: 'repeat(auto-fill, minmax(120px, 1fr))',\r\n                gap: '10px',\r\n              }}\r\n            >\r\n              {forecastData.map((value, i) => (\r\n                <ForecastValue key={i}>\r\n                  <div>Day {i + 1}</div>\r\n                  <div>${value.toFixed(2)}</div>\r\n                </ForecastValue>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </ResultsContainer>\r\n      )}\r\n\r\n      {showComparison && comparisonResults && (\r\n        <ResultsContainer>\r\n          <h2>Method Comparison</h2>\r\n          <ChartContainer>\r\n            <LineChart\r\n              data={{\r\n                labels: [\r\n                  ...historicalData.map((_, i) => `D${i + 1}`),\r\n                  ...Array(steps).fill(0).map((_, i) => `F${i + 1}`),\r\n                ],\r\n                datasets: [\r\n                  {\r\n                    label: 'Historical Data',\r\n                    data: [...historicalData, ...Array(steps).fill(null)],\r\n                    borderColor: '#4a6fa5',\r\n                    backgroundColor: 'rgba(74, 111, 165, 0.1)',\r\n                    tension: 0.1,\r\n                  },\r\n                  ...comparisonResults.map((result, i) => ({\r\n                    label: `${formatMethodName(result.method)} (${result.accuracy.toFixed(1)}%)`,\r\n                    data: [...Array(historicalData.length).fill(null), ...result.forecast],\r\n                    borderColor: ['#ff6b6b', '#88c999', '#f4a261'][i],\r\n                    backgroundColor: 'transparent',\r\n                    borderDash: [5, 5],\r\n                    tension: 0.1,\r\n                  })),\r\n                ],\r\n              }}\r\n            />\r\n          </ChartContainer>\r\n\r\n          <MethodComparison>\r\n            {comparisonResults.map((result, i) => (\r\n              <Card key={i}>\r\n                <h3>{formatMethodName(result.method)}</h3>\r\n                <p>\r\n                  Accuracy: <strong>{result.accuracy.toFixed(1)}%</strong>\r\n                </p>\r\n                <p>\r\n                  Forecast Range:\r\n                  <strong> ${Math.min(...result.forecast).toFixed(2)}</strong> to\r\n                  <strong> ${Math.max(...result.forecast).toFixed(2)}</strong>\r\n                </p>\r\n                <p>\r\n                  Average:\r\n                  <strong> ${(result.forecast.reduce((a, b) => a + b, 0) / result.forecast.length).toFixed(2)}</strong>\r\n                </p>\r\n              </Card>\r\n            ))}\r\n          </MethodComparison>\r\n        </ResultsContainer>\r\n      )}\r\n    </PageContainer>\r\n  );\r\n}\r\n\r\nexport default MarketForecasting;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}